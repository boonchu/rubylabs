== README

* Scaffolding Generator
* Applying Scaffolding to DB
* start rails and update DB
* run test to retrieve records from MVC

```
rails generate scaffold car make color year:integer
rake --task
rake db:migrate
rails s
curl http://localhost:3000/cars.json
```

* Database SQLite3
  * Which database are we using? (config/database.yml)
  * accessing DB
  * investigate your schema

```
rails db
sqlite> .tables
cars               people             schema_migrations
sqlite> .headers on
sqlite> .mode columns
sqlite> select * from cars;
id          company     color       year        created_at                  updated_at                  price
----------  ----------  ----------  ----------  --------------------------  --------------------------  ----------
1           Cadillac    Black       2014        2015-11-11 16:22:37.236499  2015-11-11 16:22:37.236499
2           Infiniti    Silver      2015        2015-11-11 16:22:59.309560  2015-11-11 16:22:59.309560
3           BMW         Blue        2014        2015-11-11 16:23:17.527342  2015-11-11 16:23:17.527342

❯ rails db                                                                              system
SQLite version 3.8.10.2 2015-05-20 18:17:19
Enter ".help" for usage hints.
sqlite> .schema cars
CREATE TABLE "cars" ("id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, "company" varchar, "color" varchar, "year" integer, "created_at" datetime NOT NULL, "updated_at" datetime NOT NULL, "price" decimal(10,2));
```

* Adding price to Cars table

```
$ rails generate migration add_price_to_cars 'price:decimal{10,2}'                      system
      invoke  active_record
   identical    db/migrate/20150907183118_add_price_to_cars.rb

$ cat db/migrate/20150907183118_add_price_to_cars.rb                                    system
class AddPriceToCars < ActiveRecord::Migration
  def change
    add_column :cars, :price, :decimal, precision: 10, scale: 2
  end
end

❯ rails db                                                                              system
SQLite version 3.8.10.2 2015-05-20 18:17:19
Enter ".help" for usage hints.
sqlite> .schema cars
CREATE TABLE "cars" ("id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, "company" varchar, "color" varchar, "year" integer, "created_at" datetime NOT NULL, "updated_at" datetime NOT NULL, "price" decimal(10,2));
sqlite> .exit
```

* Overall Schema of Your DB

```
cat db/schema.rb                                                                      system
# encoding: UTF-8
# This file is auto-generated from the current state of the database. Instead
# of editing this file, please use the migrations feature of Active Record to
# incrementally modify your database, and then regenerate this schema definition.
#
# Note that this schema.rb definition is the authoritative source for your
# database schema. If you need to create the application database on another
# system, you should be using db:schema:load, not running all the migrations
# from scratch. The latter is a flawed and unsustainable approach (the more migrations
# you'll amass, the slower it'll run and the greater likelihood for issues).
#
# It's strongly recommended that you check this file into your version control system.

ActiveRecord::Schema.define(version: 20150907202117) do

  create_table "cars", force: :cascade do |t|
    t.string   "company"
    t.string   "color"
    t.integer  "year"
    t.datetime "created_at",                          null: false
    t.datetime "updated_at",                          null: false
    t.decimal  "price",      precision: 10, scale: 2
  end

  create_table "people", force: :cascade do |t|
    t.string   "first_name"
    t.string   "last_name"
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
  end

end
```

* Renaming Column name
  * generate new migration
  * edit migration file to have rename logic
  * start rails
  * run db:migrate
  * edit app/views/cars/index.html.erb
  * edit app/views/cars/index.json.jbuilder

```
$ rails generate migration rename_company_to_make --skip

$ cat db/migrate/20151111164517_rename_company_to_make.rb                               system
class RenameCompanyToMake < ActiveRecord::Migration
  def change
    rename_column :cars, :company, :make
  end
end

$ rails s
 compliant from browser after hitting http://localhost:3000/cars

"Migrations are pending. To resolve this issue, run: bin/rake db:migrate RAILS_ENV=development"

rake db:migrate                                                                       system
== 20151111164517 RenameCompanyToMake: migrating ==============================
-- rename_column(:cars, :company, :make)
   -> 0.0060s
== 20151111164517 RenameCompanyToMake: migrated (0.0061s) =====================

ActionView::Template::Error (undefined method `company' for #<Car:0x0000010205d1a8>):
    15:   <tbody>
    16:     <% @cars.each do |car| %>
    17:       <tr>
    18:         <td><%= car.company %></td>
    19:         <td><%= car.color %></td>
    20:         <td><%= car.year %></td>
    21:         <td><%= link_to 'Show', car %></td>

```

* Rails Console

```
> rails c                                                                                                                                    master [65989fd]
Loading development environment (Rails 4.2.3)
2.1.1 :001 > Car.column_names
 => ["id", "make", "color", "year", "created_at", "updated_at", "price"]
2.1.1 :002 > Car.primary_key
 => "id"
2.1.1 :003 > exit
```

* Model and Migration

```
> irb                                                                                                                                        master [65989fd]
2.1.1 :001 > pros = { name: "John", age: 15 }
 => {:name=>"John", :age=>15}
2.1.1 :002 > person = Person.new
NameError: uninitialized constant Person
    from (irb):2
    from /Users/bigchoo/.rvm/rubies/ruby-2.1.1/bin/irb:11:in `<main>'
2.1.1 :003 > class Person; attr_accessor :name, :age; end
 => nil
2.1.1 :004 > person = Person.new
 => #<Person:0x000001030f0358>
2.1.1 :005 > pros.each { |key, value| person.send("#{key}=", value) }
 => {:name=>"John", :age=>15}
2.1.1 :006 >

> rails generate model person first_name last_name                                                                                  master [65989fd] modified
      invoke  active_record
   identical    db/migrate/20150907202117_create_people.rb
   identical    app/models/person.rb
      invoke    test_unit
   identical      test/models/person_test.rb
   identical      test/fixtures/people.yml
```

* Active Record

```
MacPro :: crud/fancy-cars » rails c
Loading development environment (Rails 4.2.3)
2.1.1 :001 > Person.column_names
 => ["id", "first_name", "last_name", "created_at", "updated_at"]
2.1.1 :002 > p1 = Person.new; p1.first_name = "Joe"; p1.last_name = "Smith"
 => "Smith"
2.1.1 :003 > p1.save
   (0.2ms)  begin transaction
  SQL (0.9ms)  INSERT INTO "people" ("first_name", "last_name", "created_at", "updated_at") VALUES (?, ?, ?, ?)  [["first_name", "Joe"], ["last_name", "Smith"], ["created_at", "2015-11-12 15:44:17.135745"], ["updated_at", "2015-11-12 15:44:17.135745"]]
   (0.5ms)  commit transaction
 => true
2.1.1 :004 > p2 = Person.new( first_name: "John", last_name: "Smith"); p2.save
   (0.1ms)  begin transaction
  SQL (0.2ms)  INSERT INTO "people" ("first_name", "last_name", "created_at", "updated_at") VALUES (?, ?, ?, ?)  [["first_name", "John"], ["last_name", "Smith"], ["created_at", "2015-11-12 15:44:50.523370"], ["updated_at", "2015-11-12 15:44:50.523370"]]
   (1.1ms)  commit transaction
 => true
2.1.1 :001 > p3 = Person.create(first_name: "Jane", last_name: "Doe")
   (0.1ms)  begin transaction
  SQL (0.4ms)  INSERT INTO "people" ("first_name", "last_name", "created_at", "updated_at") VALUES (?, ?, ?, ?)  [["first_name", "Jane"], ["last_name", "Doe"], ["created_at", "2015-11-12 15:46:29.781099"], ["updated_at", "2015-11-12 15:46:29.781099"]]
   (0.9ms)  commit transaction
 => #<Person id: 3, first_name: "Jane", last_name: "Doe", created_at: "2015-11-12 15:46:29", updated_at: "2015-11-12 15:46:29">
2.1.1 :002 >
```

* Take and Pluck

```
2.1.1 :003 >   Person.all.order(first_name: :desc)
  Person Load (1.3ms)  SELECT "people".* FROM "people"  ORDER BY "people"."first_name" DESC
 => #<ActiveRecord::Relation [#<Person id: 2, first_name: "John", last_name: "Smith", created_at: "2015-11-12 15:44:50", updated_at: "2015-11-12 15:44:50">, #<Person id: 1, first_name: "Joe", last_name: "Smith", created_at: "2015-11-12 15:44:17", updated_at: "2015-11-12 15:44:17">, #<Person id: 3, first_name: "Jane", last_name: "Doe", created_at: "2015-11-12 15:46:29", updated_at: "2015-11-12 15:46:29">]>

2.1.1 :004 > Person.all.order(first_name: :desc).to_a
  Person Load (0.2ms)  SELECT "people".* FROM "people"  ORDER BY "people"."first_name" DESC
 => [#<Person id: 2, first_name: "John", last_name: "Smith", created_at: "2015-11-12 15:44:50", updated_at: "2015-11-12 15:44:50">, #<Person id: 1, first_name: "Joe", last_name: "Smith", created_at: "2015-11-12 15:44:17", updated_at: "2015-11-12 15:44:17">, #<Person id: 3, first_name: "Jane", last_name: "Doe", created_at: "2015-11-12 15:46:29", updated_at: "2015-11-12 15:46:29">]

2.1.1 :005 > Person.first
  Person Load (0.1ms)  SELECT  "people".* FROM "people"  ORDER BY "people"."id" ASC LIMIT 1
 => #<Person id: 1, first_name: "Joe", last_name: "Smith", created_at: "2015-11-12 15:44:17", updated_at: "2015-11-12 15:44:17">

2.1.1 :006 > Person.all.first
  Person Load (0.1ms)  SELECT  "people".* FROM "people"  ORDER BY "people"."id" ASC LIMIT 1
 => #<Person id: 1, first_name: "Joe", last_name: "Smith", created_at: "2015-11-12 15:44:17", updated_at: "2015-11-12 15:44:17">

2.1.1 :007 > Person.all[0]
  Person Load (0.1ms)  SELECT "people".* FROM "people"
 => #<Person id: 1, first_name: "Joe", last_name: "Smith", created_at: "2015-11-12 15:44:17", updated_at: "2015-11-12 15:44:17">

2.1.1 :008 > Person.take
  Person Load (0.2ms)  SELECT  "people".* FROM "people" LIMIT 1
 => #<Person id: 1, first_name: "Joe", last_name: "Smith", created_at: "2015-11-12 15:44:17", updated_at: "2015-11-12 15:44:17">

2.1.1 :009 > Person.take 2
  Person Load (0.1ms)  SELECT  "people".* FROM "people" LIMIT 2
 => [#<Person id: 1, first_name: "Joe", last_name: "Smith", created_at: "2015-11-12 15:44:17", updated_at: "2015-11-12 15:44:17">, #<Person id: 2, first_name: "John", last_name: "Smith", created_at: "2015-11-12 15:44:50", updated_at: "2015-11-12 15:44:50">]

2.1.1 :001 > Person.all.map { |person|  person.first_name }
  Person Load (0.9ms)  SELECT "people".* FROM "people"
 => ["Joe", "John", "Jane"]
2.1.1 :002 >
```

* Where 

* Find_by

* limit/Offset

* Update CRUD

```
2.1.1 :001 > jane = Person.find_by first_name: "Jane"
  Person Load (0.2ms)  SELECT  "people".* FROM "people" WHERE "people"."first_name" = ? LIMIT 1  [["first_name", "Jane"]]
 => #<Person id: 3, first_name: "Jane", last_name: "Doe", created_at: "2015-11-12 15:46:29", updated_at: "2015-11-12 15:46:29">
2.1.1 :002 > jane.last_name = "Smithie"
 => "Smithie"
2.1.1 :003 > jane.save
   (0.1ms)  begin transaction
  SQL (0.4ms)  UPDATE "people" SET "last_name" = ?, "updated_at" = ? WHERE "people"."id" = ?  [["last_name", "Smithie"], ["updated_at", "2015-11-12 15:56:12.705962"], ["id", 3]]
   (1.0ms)  commit transaction
 => true
2.1.1 :004 > jane = Person.find(3)
  Person Load (0.2ms)  SELECT  "people".* FROM "people" WHERE "people"."id" = ? LIMIT 1  [["id", 3]]
 => #<Person id: 3, first_name: "Jane", last_name: "Smithie", created_at: "2015-11-12 15:46:29", updated_at: "2015-11-12 15:56:12">
2.1.1 :005 > Person.find_by(last_name: "Smith").update(last_name: "Smithson")
  Person Load (0.2ms)  SELECT  "people".* FROM "people" WHERE "people"."last_name" = ? LIMIT 1  [["last_name", "Smith"]]
   (0.1ms)  begin transaction
  SQL (0.2ms)  UPDATE "people" SET "last_name" = ?, "updated_at" = ? WHERE "people"."id" = ?  [["last_name", "Smithson"], ["updated_at", "2015-11-12 15:57:02.115422"], ["id", 1]]
   (1.0ms)  commit transaction
 => true

```

* Destroy/Delete CRUD
  * delete vs destroy

```
MacPro :: crud/fancy-cars » rails c
Loading development environment (Rails 4.2.3)
2.1.1 :001 > Person.count
   (0.1ms)  SELECT COUNT(*) FROM "people"
 => 3

2.1.1 :002 > jane = Person.find_by first_name: "Jane"
  Person Load (0.2ms)  SELECT  "people".* FROM "people" WHERE "people"."first_name" = ? LIMIT 1  [["first_name", "Jane"]]
 => #<Person id: 3, first_name: "Jane", last_name: "Smithie", created_at: "2015-11-12 15:46:29", updated_at: "2015-11-12 15:56:12">

2.1.1 :003 > jane.destroy
   (0.1ms)  begin transaction
  SQL (0.3ms)  DELETE FROM "people" WHERE "people"."id" = ?  [["id", 3]]
   (1.0ms)  commit transaction
 => #<Person id: 3, first_name: "Jane", last_name: "Smithie", created_at: "2015-11-12 15:46:29", updated_at: "2015-11-12 15:56:12">

2.1.1 :004 > joe = Person.find_by first_name: "Joe"
  Person Load (0.1ms)  SELECT  "people".* FROM "people" WHERE "people"."first_name" = ? LIMIT 1  [["first_name", "Joe"]]
 => #<Person id: 1, first_name: "Joe", last_name: "Smithson", created_at: "2015-11-12 15:44:17", updated_at: "2015-11-12 15:57:02">

2.1.1 :005 > Person.delete(joe.id)
  SQL (1.2ms)  DELETE FROM "people" WHERE "people"."id" = ?  [["id", 1]]
 => 1

2.1.1 :006 > Person.count
   (0.1ms)  SELECT COUNT(*) FROM "people"
 => 1
2.1.1 :007 >
```
